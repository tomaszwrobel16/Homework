#include <iostream>
#include <string>
#include <ctime>
#include <cstdlib>
#include <cmath>

int boxSize, boxAmount, tableSize;


void draw();
void drawFrame(int* arrayDraw);
void puzzle(int* tableSource);

int main()
{
    srand(time(0));

	std::cout << "2:  4x4\n";
	std::cout << "3:  9x9\n";
	std::cout << "4:  16x16\n";
	std::cout << "5:  25x25\n\n";
	std::cout << "Enter size of sudoku: ";
	std::cin >> boxSize;

    boxAmount  = boxSize * boxSize;
    tableSize = boxAmount * boxAmount;

    int* table;
    table = new int[tableSize];

    for(int i = 0; i < boxSize; i++)
    table[i] = 0;

    int backCounter = 0;

    for(int i = 0; i < tableSize; i++)
    {
        bool again = true;
        while(again)
        {
            again = false;

            int r = rand() % boxAmount + 1;
            backCounter++;

            if(backCounter > boxAmount*3)
            {
                int back = i - rand() % (boxAmount/2);
                if(rand() % (tableSize*3) == 0)
                back = rand() % back;
                backCounter = 0;
                for(int s = back; s < i; s++)
                    table[s] = 0;
                i = back;
            }

            int col = i % boxAmount;
            int row = (i - col) / boxAmount;

            int yBox = col - col % boxSize;
            int xBox = row - row % boxSize;

            for(int y = yBox; y < yBox + boxSize; y++)
            for(int x = xBox; x < xBox + boxSize; x++)
                if(r == table[x * boxAmount  + y])
                {
                    x = y = tableSize;
                    again = true;
                }

            for(int j = 0; j < boxAmount ; j++)
                if(r == table[j * boxAmount + col] || r == table[row * boxAmount + j])
                {
                    j = boxAmount;
                    again = true;
                }

            //system("cls");
            //drawFrame(table);

            if(!again)
            {
                backCounter = 0;
                table[i] = r;
            }
        }
    }

            for(int i = 0; i < 0; i++)
                while(true)
                {
                    int r = rand() % tableSize;
                    if(table[r] != 0)
                    {
                        table[r] = 0;
                        break;
                    }
                }

                drawFrame(table);
                puzzle(table);

    return 0;
}

void draw(int* arrayDraw)
{
    for(int draw = 0; draw < tableSize; draw++)
            {

                if(draw % boxAmount  == 0)
                std::cout << std::endl;
                if(arrayDraw[draw] != 0)
                {
                    if(arrayDraw[draw] < 10)
                    std::cout << " " << arrayDraw[draw];
                    else
                    std::cout << " " << char(55 + arrayDraw[draw]);
                }
                else
                std::cout << " .";
            }
            std::cout << std::endl;

}

void drawFrame(int* arrayDraw)
{
    for(int i = 0; i < tableSize; i++)
    {
        int col = i % boxAmount;
        int row = (i - col) / boxAmount;

        char draw;
        if(arrayDraw[i] == 0)
        draw = '.';
        else if(arrayDraw[i] < 10)
        draw = arrayDraw[i] + '0';
        else
        draw = arrayDraw[i] + 55;

        if(col == 0)
            std::cout << "\n";

        if(row % boxSize == 0 && col == 0)
        {
            std::cout << " ";
            for(int j = 0; j < boxAmount*2 + boxSize*2 + 1; j++)
				std::cout << "-";
            std::cout << "\n";
        }

        if(col % boxSize == 0)
            std::cout << " |";
            std::cout << " ";
            std::cout << draw;

        if(col == boxAmount - 1)
            std::cout << " |";

        if(row == boxAmount - 1 && col == row)
        {
            std::cout << "\n ";
            for(int j = 0; j < boxAmount*2 + boxSize*2 + 1; j++)
				std::cout << "-";
            std::cout << "\n";
        }
    }
}

void puzzle(int* tableSource)
{
    int* puzTable;
    puzTable = new int[tableSize];

    int* testTable;
    testTable = new int[tableSize];

    for(int i = 0; i < tableSize; i++)
		puzTable[i] = 0;

    for(int i = 0; i < 0; i++){
        while(true)
        {
            int r = rand() % tableSize;
            if(testTable[r] == 0)
            {
                puzTable[r] = tableSource[r];
                break;
            }
        }
    }

    bool* checkTable;
    checkTable = new bool[tableSize];

    bool isDone = false;
    while(!isDone)
    {

        while(true)
        {
            int r = rand() % tableSize;
            if(puzTable[r] == 0 && testTable[r] == 0)
            {
                puzTable[r] = tableSource[r];
                testTable[r] = tableSource[r];
                break;
            }
        }

        bool isBlocked = false;

        while(!isBlocked)
        {
            isBlocked = true;

            for(int num = 1; num <= boxAmount; num++)
            {
                for(int i = 0; i < tableSize; i++)
					checkTable[i] = false;
                for(int i = 0; i < tableSize; i++)
                {
                    if(checkTable[i] == true)
                    continue;

                    int col = i % boxAmount;
                    int row = (i - col) / boxAmount;

                    int yBox = col - col % boxSize;
                    int xBox = row - row % boxSize;

                    if(testTable[i] == num)
                    {
                        for(int b = yBox; b < yBox + boxSize; b++)
                        for(int a = xBox; a < xBox + boxSize; a++)
                            checkTable[a * boxAmount + b] = true;

                        for(int j = 0; j < boxAmount ; j++)
                        {
                            checkTable[j * boxAmount + col] = true;
                            checkTable[row * boxAmount + j] = true;
                        }
                    }
                    else if(testTable[i] != 0)
                    checkTable[row * boxAmount + col] = true;
                }

                for(int b = 0; b < boxSize; b++)
                for(int a = 0; a < boxSize; a++)
                {
                    int counter = 0;
                    for(int y = 0; y < boxSize; y++)
                    for(int x = 0; x < boxSize; x++)
                        if(checkTable[(b*boxSize+y)*boxAmount + (a*boxSize+x)] == false)
                        counter++;

                    if(counter == 1)
                    for(int y = 0; y < boxSize; y++)
                    for(int x = 0; x < boxSize; x++)
                        if(checkTable[(b*boxSize+y)*boxAmount + (a*boxSize+x)] == false)
                        {
                            testTable[(b*boxSize+y)*boxAmount + (a*boxSize+x)] = num;
                            isBlocked = false;
                        }
                }
            }
        }
        isDone = true;
        for(int i = 0; i < tableSize; i++)
        if(testTable[i] == 0)
        isDone = false;
    }
    drawFrame(puzTable);
}
